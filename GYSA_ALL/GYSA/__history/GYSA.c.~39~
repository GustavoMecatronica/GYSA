#include<16F887.h>
#fuses XT, PROTECT, MCLR
#use delay(internal=4M)
//////funciones//////////////////////////////
void INTERRUPCION();
void arranque();//para buscar lo inicios de carrera del eje z
void eje_z_up();// para buscar hacia arriba
void eje_z_down();//para buscar hacia abajo
void eje_x();// para avanzar el robot
void cosechar_der();//para cosechar e fruto del lado derecho
void cosechar_izq();// para cortar el fruto del lado izquierdo
#byte PORTA=5//dedicado a controles y entradas
#byte PORTB=6//dedicado a control de motores y entrada de boton de paro en RB0
#byte PORTC=7//dedicado a indicadores, entrada de los limit switch y encoder
#byte PORTD=8//dedicado a salidas y entrada de los limit switch
#byte PORTE=9//dedicado a entrada de sensores
/////////motor eje z////////////
// Motor 1
#define paso_z PORTB,1//para dar un paso en el motor debemos activar y desactivar esta salida.
#define dir_z PORTB,2// dependiendo del valor de esta salida tendremos una direccionu otra. 0-abajo 1-arriba
#define en_z PORTB,3//Habilitacion de driver, funciona con logica negativa
//motor para posicionar el sistema de corte, lado derecho, Motor 2
#define paso_z1 PORTB,4
#define dir_z1 PORTB,5 //0-derecha 1-izquierda
#define en_z1 PORTB,6
//motor para posicionar el sistema de corte, lado izquierdo, Motor 3
#define paso_z2 PORTB,7
#define dir_z2 PORTD,7 //0-derecha 1-izquierda
#define en_z2 PORTD,6

////////motor eje x///////////////
#define der_x PORTD,5// avance a la derecha en X, el robot avanza hacia adelante
#define izq_x PORTD,4// el robot avanza hacia atrás

/////////botones de arranque y paro//////
#define inicio PORTA,0//boton de inicio **** el boton de paro se conecta al RB0****
// el boton de paro se maneja con la interrupcion del pin RB0

///////////sensores de color y encoder////////////
#define sensor1 PORTA,1
#define sensor2 PORTA,2
#define sensor3 PORTA,3
#define sensor4 PORTA,4
#define sensor5 PORTA,5
#define sensor6 PORTA,6
#define sensor7 PORTA,7
#define sensor8 PORTE,0
#define sensor9 PORTE,1
#define sensor10 PORTE,2
#define encoder PORTC,5

////////limit switch's////////
#define ls1 PORTD,3
#define ls2 PORTD,2
#define ls3 PORTD,1
#define ls4 PORTD,0
#define ls5 PORTC,7
#define ls6 PORTC,8

/////////indicadores////////////
#define led_inicio PORTC,0// indicador de inicio
#define led_paro PORTC,1//indicador de paro

////////variables globales//////////////

int velocidad=5; //variable para la velocidad del motor, es una pausa
int16 sensores=0;// concatena el valor de todos los sensores
int16 posicion_der=0; // alamcena la posicion del Motor2, en mm
int16 posicion_izq=0; // alamcena la posicion del Motor3, en mm
int cont_encoder=0; // almacena los pulsos del encoder
///////////interrupcion por el boton de paro//////////////////////////

#INT_EXT             //Funcion de la interrupcion
VOID INTERRUPCION()
{
 portb=0b01001000;
 while(!bit_test(inicio)){
 bit_clear(led_inicio);
 bit_set(led_paro);
 delay_ms(250);
 bit_clear(led_paro);
 delay_ms(250);
 }
}
//////////////////////////////////////////////////////////////////////
void main(){
set_tris_a(0xFF); 
set_tris_b(0b00000001);
set_tris_c(0b11100000);
set_tris_d(0b00001111);
set_tris_e(0b1111);
portb=0b01001000;
portc=0;
portd=0;
ENABLE_INTERRUPTS(GLOBAL);    //Habilita todas las interrupciones
ENABLE_INTERRUPTS(INT_EXT);   //Habilita la interrupción externa, entra en el pin RB0
/////////////espera a presionar el botón de inicio/////
while(!bit_test(inicio)){
   bit_set(led_inicio);
   delay_ms(200);
   bit_clear(led_inicio);
   delay_ms(200);
}
bit_set(led_inicio);
arranque();//vamos a la funcion arranque
/////////////bucle de trabajo///////////////////
while(true){
bit_set(led_inicio);
/////////////busqueda en el eje////////
eje_z_up();


   }
}
void arranque(){
//aqui movemos los motores del eje z hasta el inicio de carrera
   while(!bit_test(ls1)){// buscamos en el eje del Motor1
      bit_clear(en_z);
      bit_clear(dir_z); //vamos abajo
      bit_set(paso_z);
      delay_ms(velocidad);
      bit_clear(paso_z);
      delay_ms(velocidad);
   }
   bit_set(en_z);
   while(!bit_test(ls3)){//buscamos en el eje del Motor 2 
      bit_clear(en_z1);
      bit_set(dir_z1); //vamos abajo
      bit_set(paso_z1);
      delay_ms(velocidad);
      bit_clear(paso_z1);
      delay_ms(velocidad);
   }
   bit_set(en_z1);
   while(!bit_test(ls5)){
      bit_clear(en_z2);
      bit_set(dir_z2); //vamos abajo
      bit_set(paso_z2);
      delay_ms(velocidad);
      bit_clear(paso_z2);
      delay_ms(velocidad);
   }
   bit_set(en_z2);

}

void eje_z_up(){
// aqui buscamos frutos maduros en el eje z, en caso de encontarlo posicionamos
// el mecanismo para cortarlo y enviamos el programa a la funcion para cortar el fruto.
while(!bit_test(ls2)){// mientras no lleguemos al final de carrera
   sensores=sensor10,sensor9,sensor8,sensor7,sensor6,sensor5,sensor4,sensor3,sensor2,sensor1;
   while(sensores==0 || !bit_test(ls2)){
   sensores=sensor10,sensor9,sensor8,sensor7,sensor6,sensor5,sensor4,sensor3,sensor2,sensor1;
      bit_clear(en_z);
      bit_set(dir_z);
      bit_set(paso_z);
      delay_ms(velocidad);
      bit_clear(paso_z);
      delay_ms(velocidad);
   }
   if(sensores>=0b0000000001 || sensores<=0b0000010000){// si se activa del sensor 1 al 5...
      switch(sensores){
         case 1: //ponemos el brazo en la posicion del sensor 'N' (N es el numero del sensor), luego vamos a cosechar, luego de cosechar regresamos a 0
         //los sensores estan cada 90mm, para cada mm se requieren 25 pasos del motor
            for(int16 i=0; i<90;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z1);
               bit_clear(dir_z1);
               bit_set(paso_z1);
               delay_ms(velocidad);
               bit_clear(paso_z1);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z1);
            break;
         case 2:
             for(int16 i=0; i<180;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z1);
               bit_clear(dir_z1);
               bit_set(paso_z1);
               delay_ms(velocidad);
               bit_clear(paso_z1);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z1);
            break;
         case 4:
             for(int16 i=0; i<270;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z1);
               bit_clear(dir_z1);
               bit_set(paso_z1);
               delay_ms(velocidad);
               bit_clear(paso_z1);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z1);
            break;
         case 8:
             for(int16 i=0; i<360;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z1);
               bit_clear(dir_z1);
               bit_set(paso_z1);
               delay_ms(velocidad);
               bit_clear(paso_z1);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z1);
            break;
         case 16:
            for(int16 i=0; i<450;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z1);
               bit_clear(dir_z1);
               bit_set(paso_z1);
               delay_ms(velocidad);
               bit_clear(paso_z1);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z1);
            break;
          default:
            bit_set(en_z1);
            break;
      }
      cosechar_der();
   }
   
   
   if(sensores>=0b0000100000 || sensores<=0b1000000000){// si se activa del sensor 6 al 10...
      switch(sensores){
         case 32: //ponemos el brazo en la posicion del sensor 'N' (N es el numero del sensor).
            for(int16 i=0; i<90;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z2);
               bit_clear(dir_z2);
               bit_set(paso_z2);
               delay_ms(velocidad);
               bit_clear(paso_z2);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z2);
            break;
         case 64:
            for(int16 i=0; i<180;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z2);
               bit_clear(dir_z2);
               bit_set(paso_z2);
               delay_ms(velocidad);
               bit_clear(paso_z2);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z2);
            break;
         case 128:
            for(int16 i=0; i<270;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z2);
               bit_clear(dir_z2);
               bit_set(paso_z2);
               delay_ms(velocidad);
               bit_clear(paso_z2);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z2);
            break;
         case 256:
            for(int16 i=0; i<360;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z2);
               bit_clear(dir_z2);
               bit_set(paso_z2);
               delay_ms(velocidad);
               bit_clear(paso_z2);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z2);
            break;
         case 512:
            for(int16 i=0; i<450;i++){
              for(int i=0; i<25;i++){
               bit_clear(en_z2);
               bit_clear(dir_z2);
               bit_set(paso_z2);
               delay_ms(velocidad);
               bit_clear(paso_z2);
               delay_ms(velocidad);
             }
            }
            bit_set(en_z2);
            break;
         default:
         bit_set(en_z2);
            break;
      }
      cosechar_izq();
   }
   
}
// en caso de que lleguemos al final de carrera avanzamos en el eje x
eje_x();
}

void cosechar_der(){
delay_ms(velocidad);
}

void cosechar_izq(){
delay_ms(velocidad);
}

void eje_x(){
   // cada que entramos aqui nos desplazamos 500mm adelante
/*consideraremos un diametro de llanta de 15 cm, que da 47.1 cm, con un encoder de 30 pulsos por revolucion
entonces para hacer aprox 50 cm o 500 mm debemos contar 32 pulsos de encoder*/
   while(cont_encoder<32){
   


   cont_encoder++;
   }
}

