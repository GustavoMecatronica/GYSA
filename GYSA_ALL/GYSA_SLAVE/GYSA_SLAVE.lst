CCS PCM C Compiler, Version 5.091, 13314               04-mar.-21 14:50

               Filename:   C:\Users\Gustavo\Documents\UNIVERSIDAD\5TO CUATRIMESTRE\INTEGRADORA\GYSA_SLAVE\GYSA_SLAVE.lst

               ROM used:   311 words (4%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           12 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0FD
0003:  NOP
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
.................... 
.................... #list
.................... 
.................... #fuses PROTECT, MCLR
.................... #use delay(internal=4M)
0004:  MOVLW  26
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... 
.................... #byte PORTA = 5// dedicado a la entrada y salida de señales
.................... #byte PORTB = 6// dedicado al control de los motores
.................... #byte PORTC = 7// dedicado tambien al control de los motores
.................... #byte PORTD = 8// dedicado junto con el PORTA  a la recepción de señales (limit switch)
.................... /////////////funciones///////////////////////
.................... void cosechar_der();
.................... void cosechar_izq();
.................... void adelante_x();
.................... //////////////entrada de señales/////////////
.................... #define  cos_derecha PORTA,0 //señal para cosechar del lado derecho
.................... #define cos_izquierda PORTA,1// señal para cosechar del lado izquierdo
.................... #define avanzar_x PORTA,2//señal para avanzar en x
.................... ///////////salida de señales///////////////
.................... #define terminado PORTA,3// señal de que hemos terminado la tarea
.................... #define final_x PORTA,4 // señal de que hemos llegado al final de camino
.................... 
.................... //////////////limites de carrera////////////////////
.................... #define ls7 PORTA, 5//lado derecho
.................... #define ls8 PORTA, 6
.................... #define ls9 PORTA, 7
.................... #define ls10 PORTD,0
.................... #define ls11 PORTD,1//lado izquierdo
.................... #define ls12 PORTD,2
.................... #define ls13 PORTD,3
.................... #define ls14 PORTD,4
.................... ////////////sensor hall y de fin de carrera x//////////////////////////
.................... #define hall PORTD,5
.................... #define final_carrera PORTD,6
.................... ////////////salidas de control a motores/////////
.................... //Para mover el robot en x:
.................... #define motor_x PORTC, 4
.................... // Para cosehcar del lado derecho:
.................... //Motor 5
.................... #define paso_der  PORTB,0
.................... #define dir_der   PORTB,1//0-afuera 1-adentro
.................... #define en_der    PORTB,2
.................... //Motor 6
.................... #define paso_der1 PORTB,3
.................... #define dir_der1  PORTB,4//0-cerrar 1-abrir
.................... #define en_der1   PORTB,5
.................... //Para cosechar del lado izquierdo:
.................... //Motor 7
.................... #define paso_izq  PORTB,6
.................... #define dir_izq   PORTB,7//0-afuera 1-adentro
.................... #define en_izq    PORTC,0
.................... //Motor 8
.................... #define paso_izq1 PORTC,1
.................... #define dir_izq1  PORTC,2//0-cerrar 1-abrir
.................... #define en_izq1   PORTC,3
.................... ///////////variables globales////////////
.................... int velocidad=10; // velocidad de avance de los motores
.................... int16 contador=0; // guardamos los pasos al cerra el brazo
.................... void main(){
*
00FD:  MOVF   03,W
00FE:  ANDLW  1F
00FF:  MOVWF  03
0100:  MOVLW  61
0101:  BSF    03.5
0102:  MOVWF  0F
0103:  CLRF   10
0104:  MOVF   0F,W
0105:  MOVLW  0A
0106:  BCF    03.5
0107:  MOVWF  20
0108:  CLRF   22
0109:  CLRF   21
010A:  MOVLW  FF
010B:  MOVWF  23
010C:  BSF    03.5
010D:  BSF    03.6
010E:  MOVF   09,W
010F:  ANDLW  C0
0110:  MOVWF  09
0111:  BCF    03.6
0112:  BCF    1F.4
0113:  BCF    1F.5
0114:  MOVLW  00
0115:  BSF    03.6
0116:  MOVWF  08
0117:  BCF    03.5
0118:  CLRF   07
0119:  CLRF   08
011A:  CLRF   09
011B:  BCF    03.7
.................... set_tris_a(0b11100111);
011C:  MOVLW  E7
011D:  BSF    03.5
011E:  BCF    03.6
011F:  MOVWF  05
.................... set_tris_b(0x00);
0120:  MOVLW  00
0121:  MOVWF  06
.................... set_tris_c(0x00);
0122:  MOVWF  07
0123:  BCF    03.5
0124:  MOVWF  23
.................... set_tris_d(0b11111111);
0125:  MOVLW  FF
0126:  BSF    03.5
0127:  MOVWF  08
.................... portb=0b00100100;
0128:  MOVLW  24
0129:  BCF    03.5
012A:  MOVWF  06
.................... portc=0b00001001;
012B:  MOVLW  09
012C:  MOVWF  07
.................... bit_clear(terminado);
012D:  BCF    05.3
.................... bit_clear(final_x);
012E:  BCF    05.4
.................... //****falta iniciar los enable de cada motor en 1******
.................... while(true){
....................       if(bit_test(cos_derecha)){
012F:  BTFSC  05.0
....................          cosechar_der();// vamos a la funcion para cosechar a la derecha
0130:  GOTO   019
....................       }
....................       if(bit_test(cos_izquierda)){
0131:  BTFSC  05.1
....................          cosechar_izq();// vamos a la funcion para cosechar a la izquierda
0132:  GOTO   07F
....................       }
....................       if(bit_test(avanzar_x)){
0133:  BTFSC  05.2
....................          adelante_x();// vamos a la funcion para avanzar en x
0134:  GOTO   0E5
....................       }
0135:  GOTO   12F
....................    }
.................... }
.................... 
0136:  SLEEP
.................... void cosechar_der(){
.................... /*aqui cosechamos el fruto de la derecha, primero vamos sacando el brazo hasta que se cierra el limit switch que lo detecta o hasta que llegamos al final**,
.................... despues cerramos el brazo hasta que detectemos que esta bien apretado, aqui damos 10 pasos mas para sujetarlo bien, luego
.................... regresamos el brazo y  cuando se toque el limit switch de inicio de carrera abrimos el brazo la misma cantidad de pasos que lo abrimos
.................... **cuando llegamos al final del brazo solo regresamos el brazo y marcamos como terminada la tarea */
....................    
....................    while(!bit_test(ls9) &&  !bit_test(ls8)){//movemos el motor 5 hacia afuera
*
0019:  BTFSC  05.7
001A:  GOTO   028
001B:  BTFSC  05.6
001C:  GOTO   028
....................       bit_clear(en_der);
001D:  BCF    06.2
....................       bit_clear(dir_der); 
001E:  BCF    06.1
....................       bit_set(paso_der);
001F:  BSF    06.0
....................       delay_ms(velocidad);
0020:  MOVF   20,W
0021:  MOVWF  26
0022:  CALL   004
....................       bit_clear(paso_der);
0023:  BCF    06.0
....................       delay_ms(velocidad);
0024:  MOVF   20,W
0025:  MOVWF  26
0026:  CALL   004
0027:  GOTO   019
....................    }// cuando llegamos al fin de carrera o encontramos el tomate nos detenemos y ahora lo cortamos
....................    bit_set(en_der);
0028:  BSF    06.2
....................    
....................    if(bit_test(ls9)){// en caso de llegar al tomate lo cortamos cerrando el brazo
0029:  BTFSS  05.7
002A:  GOTO   067
....................       contador=0;// iniciamos el contador en 0.
002B:  CLRF   22
002C:  CLRF   21
....................       while(!bit_test(ls10)){// cerramos hasta detectar que apretamos el tomate, contamos los pasos que dimos
002D:  BTFSC  08.0
002E:  GOTO   03D
....................          bit_clear(en_der1);
002F:  BCF    06.5
....................          bit_clear(dir_der1); 
0030:  BCF    06.4
....................          bit_set(paso_der1);
0031:  BSF    06.3
....................          delay_ms(velocidad);
0032:  MOVF   20,W
0033:  MOVWF  26
0034:  CALL   004
....................          bit_clear(paso_der1);
0035:  BCF    06.3
....................          delay_ms(velocidad);
0036:  MOVF   20,W
0037:  MOVWF  26
0038:  CALL   004
....................          contador++;// aqui vamos contando los pasos que dió el motor
0039:  INCF   21,F
003A:  BTFSC  03.2
003B:  INCF   22,F
003C:  GOTO   02D
....................       }
....................       //ahora debemos regresar al inicio de carrera...
....................       while(!bit_test(ls7)){
003D:  BTFSC  05.5
003E:  GOTO   04A
....................          bit_clear(en_der);
003F:  BCF    06.2
....................          bit_set(dir_der); 
0040:  BSF    06.1
....................          bit_set(paso_der);
0041:  BSF    06.0
....................          delay_ms(velocidad);
0042:  MOVF   20,W
0043:  MOVWF  26
0044:  CALL   004
....................          bit_clear(paso_der);
0045:  BCF    06.0
....................          delay_ms(velocidad);  
0046:  MOVF   20,W
0047:  MOVWF  26
0048:  CALL   004
0049:  GOTO   03D
....................       }bit_set(en_der);
004A:  BSF    06.2
....................       //ahora soltamos el tomate
....................       for(int16 i=0; i<contador;i++){
004B:  CLRF   25
004C:  CLRF   24
004D:  MOVF   25,W
004E:  SUBWF  22,W
004F:  BTFSS  03.0
0050:  GOTO   065
0051:  BTFSS  03.2
0052:  GOTO   057
0053:  MOVF   21,W
0054:  SUBWF  24,W
0055:  BTFSC  03.0
0056:  GOTO   065
....................          bit_clear(en_der1);
0057:  BCF    06.5
....................          bit_set(dir_der1); 
0058:  BSF    06.4
....................          bit_set(paso_der1);
0059:  BSF    06.3
....................          delay_ms(velocidad);
005A:  MOVF   20,W
005B:  MOVWF  26
005C:  CALL   004
....................          bit_clear(paso_der1);
005D:  BCF    06.3
....................          delay_ms(velocidad);
005E:  MOVF   20,W
005F:  MOVWF  26
0060:  CALL   004
0061:  INCF   24,F
0062:  BTFSC  03.2
0063:  INCF   25,F
0064:  GOTO   04D
....................       }bit_set(en_der1);
0065:  BSF    06.5
....................       // ahora ya soltamos el tomate y podemos continuar con el código y enviar la señal de terminado
....................    }else if (bit_test(ls8)){// en caso de llegar al final de carrera sin tomate, solo regresamos al inicio de carrera
0066:  GOTO   077
0067:  BTFSS  05.6
0068:  GOTO   077
....................       while(!bit_test(ls7)){
0069:  BTFSC  05.5
006A:  GOTO   076
....................          bit_clear(en_der);
006B:  BCF    06.2
....................          bit_set(dir_der); 
006C:  BSF    06.1
....................          bit_set(paso_der);
006D:  BSF    06.0
....................          delay_ms(velocidad);
006E:  MOVF   20,W
006F:  MOVWF  26
0070:  CALL   004
....................          bit_clear(paso_der);
0071:  BCF    06.0
....................          delay_ms(velocidad);  
0072:  MOVF   20,W
0073:  MOVWF  26
0074:  CALL   004
0075:  GOTO   069
....................       }bit_set(en_der);
0076:  BSF    06.2
....................    }
....................    //ahora enviamos la señal de terminado por 200 ms
....................    bit_set(terminado);
0077:  BSF    05.3
....................    delay_ms(200);
0078:  MOVLW  C8
0079:  MOVWF  26
007A:  CALL   004
....................    bit_clear(terminado);
007B:  BCF    05.3
007C:  BCF    0A.3
007D:  BCF    0A.4
007E:  GOTO   131 (RETURN)
....................    // aqui vamos al main de nuevo
.................... }
.................... 
.................... void cosechar_izq(){
.................... /*aqui cosechamos el fruto de la derecha, primero vamos sacando el brazo hasta que se cierra el limit switch que lo detecta o hasta que llegamos al final**,
.................... despues cerramos el brazo hasta que detectemos que esta bien apretado, aqui damos 10 pasos mas para sujetarlo bien, luego
.................... regresamos el brazo y  cuando se toque el limit switch de inicio de carrera abrimos el brazo la misma cantidad de pasos que lo abrimos
.................... **cuando llegamos al final del brazo solo regresamos el brazo y marcamos como terminada la tarea */
....................    
....................    while(!bit_test(ls13) &&  !bit_test(ls12)){//movemos el motor 7 hacia afuera
007F:  BTFSC  08.3
0080:  GOTO   08E
0081:  BTFSC  08.2
0082:  GOTO   08E
....................       bit_clear(en_izq);
0083:  BCF    07.0
....................       bit_clear(dir_izq); 
0084:  BCF    06.7
....................       bit_set(paso_izq);
0085:  BSF    06.6
....................       delay_ms(velocidad);
0086:  MOVF   20,W
0087:  MOVWF  26
0088:  CALL   004
....................       bit_clear(paso_izq);
0089:  BCF    06.6
....................       delay_ms(velocidad);
008A:  MOVF   20,W
008B:  MOVWF  26
008C:  CALL   004
008D:  GOTO   07F
....................    }// cuando llegamos al fin de carrera o encontramos el tomate nos detenemos y ahora lo cortamos
....................    bit_set(en_izq);
008E:  BSF    07.0
....................    
....................    if(bit_test(ls13)){// en caso de llegar al tomate lo cortamos cerrando el brazo
008F:  BTFSS  08.3
0090:  GOTO   0CD
....................       contador=0;// iniciamos el contador en 0.
0091:  CLRF   22
0092:  CLRF   21
....................       while(!bit_test(ls14)){// cerramos hasta detectar que apretamos el tomate, contamos los pasos que dimos
0093:  BTFSC  08.4
0094:  GOTO   0A3
....................          bit_clear(en_izq1);
0095:  BCF    07.3
....................          bit_clear(dir_izq1); 
0096:  BCF    07.2
....................          bit_set(paso_izq1);
0097:  BSF    07.1
....................          delay_ms(velocidad);
0098:  MOVF   20,W
0099:  MOVWF  26
009A:  CALL   004
....................          bit_clear(paso_izq1);
009B:  BCF    07.1
....................          delay_ms(velocidad);
009C:  MOVF   20,W
009D:  MOVWF  26
009E:  CALL   004
....................          contador++;// aqui vamos contando los pasos que dió el motor
009F:  INCF   21,F
00A0:  BTFSC  03.2
00A1:  INCF   22,F
00A2:  GOTO   093
....................       }
....................       //ahora debemos regresar al inicio de carrera...
....................       while(!bit_test(ls11)){
00A3:  BTFSC  08.1
00A4:  GOTO   0B0
....................          bit_clear(en_izq);
00A5:  BCF    07.0
....................          bit_set(dir_izq); 
00A6:  BSF    06.7
....................          bit_set(paso_izq);
00A7:  BSF    06.6
....................          delay_ms(velocidad);
00A8:  MOVF   20,W
00A9:  MOVWF  26
00AA:  CALL   004
....................          bit_clear(paso_izq);
00AB:  BCF    06.6
....................          delay_ms(velocidad);  
00AC:  MOVF   20,W
00AD:  MOVWF  26
00AE:  CALL   004
00AF:  GOTO   0A3
....................       }bit_set(en_izq);
00B0:  BSF    07.0
....................       //ahora soltamos el tomate
....................       for(int16 i=0; i<contador;i++){
00B1:  CLRF   25
00B2:  CLRF   24
00B3:  MOVF   25,W
00B4:  SUBWF  22,W
00B5:  BTFSS  03.0
00B6:  GOTO   0CB
00B7:  BTFSS  03.2
00B8:  GOTO   0BD
00B9:  MOVF   21,W
00BA:  SUBWF  24,W
00BB:  BTFSC  03.0
00BC:  GOTO   0CB
....................          bit_clear(en_izq1);
00BD:  BCF    07.3
....................          bit_set(dir_izq1); 
00BE:  BSF    07.2
....................          bit_set(paso_izq1);
00BF:  BSF    07.1
....................          delay_ms(velocidad);
00C0:  MOVF   20,W
00C1:  MOVWF  26
00C2:  CALL   004
....................          bit_clear(paso_izq1);
00C3:  BCF    07.1
....................          delay_ms(velocidad);
00C4:  MOVF   20,W
00C5:  MOVWF  26
00C6:  CALL   004
00C7:  INCF   24,F
00C8:  BTFSC  03.2
00C9:  INCF   25,F
00CA:  GOTO   0B3
....................       }bit_set(en_izq1);
00CB:  BSF    07.3
....................       // ahora ya soltamos el tomate y podemos continuar con el código y enviar la señal de terminado
....................    }else if (bit_test(ls12)){// en caso de llegar al final de carrera sin tomate, solo regresamos al inicio de carrera
00CC:  GOTO   0DD
00CD:  BTFSS  08.2
00CE:  GOTO   0DD
....................       while(!bit_test(ls11)){
00CF:  BTFSC  08.1
00D0:  GOTO   0DC
....................          bit_clear(en_izq);
00D1:  BCF    07.0
....................          bit_set(dir_izq); 
00D2:  BSF    06.7
....................          bit_set(paso_izq);
00D3:  BSF    06.6
....................          delay_ms(velocidad);
00D4:  MOVF   20,W
00D5:  MOVWF  26
00D6:  CALL   004
....................          bit_clear(paso_izq);
00D7:  BCF    06.6
....................          delay_ms(velocidad);  
00D8:  MOVF   20,W
00D9:  MOVWF  26
00DA:  CALL   004
00DB:  GOTO   0CF
....................       }bit_set(en_izq);
00DC:  BSF    07.0
....................    }
....................    //ahora enviamos la señal de terminado por 200 ms
....................    bit_set(terminado);
00DD:  BSF    05.3
....................    delay_ms(200);
00DE:  MOVLW  C8
00DF:  MOVWF  26
00E0:  CALL   004
....................    bit_clear(terminado);
00E1:  BCF    05.3
00E2:  BCF    0A.3
00E3:  BCF    0A.4
00E4:  GOTO   133 (RETURN)
....................    // aqui vamos al main de nuevo
.................... }
.................... 
.................... void adelante_x(){
.................... //aqui activamos el motor para mover el robot adelante, en este caso es un motor de CD
.................... // si detectamos que ya no hay bancales de jitomates, hemos llegado al final
.................... /*las llantas son de 4 1/2", entonces cada vuelta avanza aprox 36 cm, por lo que necesitamos media vuelta para
.................... avanzar los 18 cm que necesitamos, por ello colocamos dos imanes en la llanta, para detectar cada media vuelta un pulso
....................  con el sensor hall*/
....................    while(bit_test(hall)){//esperamos a 'liberar' la señal antigua del sensor hall, luego esperamos la nueva y apagamos
00E5:  BTFSS  08.5
00E6:  GOTO   0E9
....................       bit_set(motor_x);
00E7:  BSF    07.4
00E8:  GOTO   0E5
....................    }
....................    //luego de liberar la señal antigua seguimos avanzando solo si no llegamos al final de carrera
....................    if(bit_test(final_carrera)){
00E9:  BTFSS  08.6
00EA:  GOTO   0F0
....................       while(true){// se llegamos al final de x nos quedamos en un bucle infinito, hasta apagar el equipo
....................          bit_set(final_x);
00EB:  BSF    05.4
....................          bit_clear(terminado);
00EC:  BCF    05.3
....................          bit_clear(motor_x);
00ED:  BCF    07.4
00EE:  GOTO   0EB
....................       }
....................    }else{
00EF:  GOTO   0FA
....................       while(!bit_test(hall)){// esperamos la nueva señal del hall
00F0:  BTFSC  08.5
00F1:  GOTO   0F4
....................          bit_set(motor_x);
00F2:  BSF    07.4
00F3:  GOTO   0F0
....................       }
....................       bit_clear(motor_X);// luego de tener la señal apagamos el motor y regresamos al main
00F4:  BCF    07.4
....................          //ahora enviamos la señal de terminado por 200 ms
....................          bit_set(terminado);
00F5:  BSF    05.3
....................          delay_ms(200);
00F6:  MOVLW  C8
00F7:  MOVWF  26
00F8:  CALL   004
....................          bit_clear(terminado);
00F9:  BCF    05.3
....................          // aqui vamos al main de nuevo
....................    }
00FA:  BCF    0A.3
00FB:  BCF    0A.4
00FC:  GOTO   135 (RETURN)
.................... }
.................... 

Configuration Fuses:
   Word  1: 2FA4   INTRC_IO NOWDT PUT MCLR PROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
